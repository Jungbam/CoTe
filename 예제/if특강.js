// if문을 왜 쓰냐면?
// 이렇다면 이렇게 하고싶고 저렇다면 저렇게 싶어서 씁니다.
// 조건문
// => 조건에 만족하면 A를 하고 만족하지 않으면 B를 할래.
// 기준이 조건!
// 조건문의 종류 : if 문, switch-case문
// - if문은 범위가 주어진 조건일 때에 사용하기 편하다.
// - switch-case문은 case가 정해져있을때 딱 떨어지는 값이어야 됨.
// 내가 작업하는 공간이 전역스코프기때문에 블록스코프에 선언하면 전역에서 사용할 수없기때문.
if (true) {
  // ++ 전역변수를 사용하지 않는게 좋은 이유
  // 블록 스코프에서 쓰이기 때문에 다른 블록 스코프에서 영향을 주지 않는게 좋기 때문에.
  let 상금 = 0
  // +1
  상금++
  // 어떤 스코프? 지역-렉시컬-스코프 / 블록
  // 조건이 참일때(true, truthy)
  console.log(상금)
} else {
  // -1
  // 조건이 거짓일때(false, falsy)
}
// 내가 원하는 출력을 어디에다가 담을것인가? a에다가 담겠다.

if (true) {
  // ⓐ
} else {
  if (true) {
    // ⓑ 40번째 줄은 거짓이고 43번째 줄이 참일때
  } else {
    if (true) {
      // ⓒ 40번째 줄은 거짓이고 43번째 줄도 거짓이고 46번째가 참일때
    } else {
      // ⓓ 싹다 거짓일 때
    }
  }
}
// if-else if문
if (true) {
  // ⓐ 54번째 참일때
} else if (true) {
  // ⓑ 56번째 참일때
} else if (true) {
  // ⓒ 58번쨰 참일때
} else {
  // ⓓ 싹다 거짓일때
}

// 삼항연산자
// 조건문 ? 참 : 거짓
if (true) {
  // 참
} else {
  // 거짓
}
false ? console.log('hi') : console.log('bye')
0 ? console.log('hi') : console.log('bye') // bye
'0' ? console.log('hi') : console.log('bye') // hi
// userId = rquest.body.userId? DB에서 그 userID를 뽑아서 줘라 : 프론트한테 userid 다르다고 출력해줘라

// 논리곱 / 논리합
// && => 양쪽이 참이어야 함. / 한쪽이라도 거짓이면 거짓이다.
// || => 한쪽만 참이면 됨. // 한쪽은 거짓이어도 상관없다.

// && => 앞쪽이 참이면 뒤쪽이 출력
// || => 앞쪽이 참이면 앞쪽이 출력

// 참1 && 참2 => 참2
// 거짓1 && 참1 => 거짓1
// 거짓1 || 참1 => 참1
// 거짓1 || 거짓2 => 거짓2
